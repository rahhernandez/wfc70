[["index.html", "WFC 70: Data Literacy for Wildlife Biologist Welcome to WFC 70", " WFC 70: Data Literacy for Wildlife Biologist Rob Furrow 2025-05-06 Welcome to WFC 70 The purpose of WFC 70 is to introduce and strength your data literacy skills. In this course, you will working with data sets, R and R Studio and understanding what data literacy is. This website aims to be a place where we demonstrate solutions to common mistakes, provide more practice, and provide resources to improve your R and data literacy skills. This website was created by Learning Assistants! We hope it is of use :) "],["getting-started.html", "Getting Started 0.1 Installing R and R Studio 0.2 Downloading on Mac 0.3 Downloading on Windows", " Getting Started 0.1 Installing R and R Studio A program you will hopefully become familiar with is R and R Studio. Lecture and lab discusses the differences between these two. R is the language you are using to create the graphs. R Studio is where you input the code. One way to think about it is that R Studio is the kitchen and R represents all your ingredients. We will need both on your computer before your first lab. Even if you are not going to be bringing your personal computer to lab, having it can be helpful for homework and the Data Story. 0.2 Downloading on Mac 0.3 Downloading on Windows Once you have successfully downloaded both, don’t be afraid to open R Studio and play around! "],["tutorials.html", "Tutorials", " Tutorials People make mistakes. It is a common process in coding that everyone, no just beginners experience. Here we will provide some tips if you make a mistake and provide tutorials for some potential complicated concepts. "],["checklist.html", " 1 Checklist", " 1 Checklist Since mistakes are regular, "],["lab-1-r-data-and-the-rstudio-panels.html", "A Lab 1: R, data, and the RStudio panels A.1 Part 1: Orienting ourselves to RStudio (10 minutes, instructor will lead) A.2 Part 2: Trying things out yourselves (10 minutes, on your own) A.3 Part 3: Making toast (10 minutes total) A.4 Part 4: Data frames to link data together (5 minutes, instructor will lead) A.5 Wrapping up (5 minutes) A.6 Extra material for interest (will not be assessed on any homework)", " A Lab 1: R, data, and the RStudio panels In this lab, we will learn a few foundations of programming and get acquainted with R and RStudio. By the end of this lab, you should be able to program in R to: make arithmetic calculations, create an object to hold a vector of values, convert from a set of vectors to a data frame. A.1 Part 1: Orienting ourselves to RStudio (10 minutes, instructor will lead) On your lab computer, open up RStudio. With RStudio open, click File -&gt; New File -&gt; R Script. Your workspace should look something like this. The RStudio Workspace Let’s begin by running some calculations in the console. R is basically a very fancy calculator. Run the next few lines by copying and pasting each one into the console, pressing the “Enter” key after each line. 35+10 ## [1] 45 (6*2+48)/3 ## [1] 20 a &lt;- 3 b = 3 a^2 ## [1] 9 #A^3 What happened when you ran that final line of code when you uncomment it? Hint, take a look at the “Environment” pane in the upper right of RStudio. What are the names of the objects that you stored? Which lines of code created those objects in the Environment? Is A in the Environment? Takeaway: You can store values (or sets of values) in R by assigning them a name. But NAMES ARE CASE SENSITIVE, so A is not the same as a. This named information is called an object, and it could be anything from a single value, a spreadsheet with many columns of measurements for many individual organisms, a list containing a wide array of information, or even a function that can be used to make complex calculations. A.1.1 The command line / “Console” versus a R script Our workspace may still feel a little confusing. We have asked you to write things in an R script (upper left) and then copy them into the console(also called the command line, lower left) and press enter. R will only actually run the code that is entered into the console. But if you only program in the console, you won’t have useful documentation of everything you’ve done, and it may be hard to reproduce. And, if you close R, everything you’ve entered will be gone. Instead, R programmers will generally write scripts (which are files that end in the suffix “.R”), so they can have a single place to save all the code they used for a particular task or project. Later in the course we’ll learn an even more flexible way to document our code using an RMarkdown file, which allows you to integrate regular text, R code, and R plots and other outputs into one easy-to-read document. But that’s too much for today. Let’s delve a little deeper into R’s features. A.1.2 R data is often stored in “vectors” A vector in R is a way to store a sequence of values. In our case, the vectors we look at will usually be a sequence of numbers, but they could also be storing a set of TRUE/FALSE values, a set of “strings” (i.e. letters/words/sentences) or a few other types. Much of the data you use in R will be stored as vectors, often organized with each vector as a column in a bigger matrix/spreadsheet of data (this is called a data frame). Let’s create some vectors. We will use a function in R called c(). That function lets you combine a sequence of values into a vector. You enter each value, separated by a comma. From this point onward, you should initially write/paste the code into your script (upper left), then run those lines in the console. You can directly run the lines in a script by pressing the Crtl+Enter keys at the same time (it’s Cmd+Enter on a Mac), while your cursor is on that line of code. Try that for this next set of commands. idaho_wolves &lt;- c(1545, 1556, 1543, 1337) idaho_years &lt;- c(2019, 2020, 2021, 2022) Look at your upper right panel in RStudio. You should see two new objects in your environment. When your line of code is storing a new object in the environment, it won’t show any output. But you can always enter the name of that object into the console and press enter to view it. (Tip: If you start writing a name, R will try to autocomplete, you can press Tab to take its suggestion.) idaho_wolves ## [1] 1545 1556 1543 1337 Now let’s have R do something useful. c() was the first function you’ve seen, but R has lots of functions. When you run a function, it will always have round brackets, (), usually with some inputs inside. In programming, we call the inputs to a function the arguments. Let’s try out another function, mean(). This function’s main argument is a vector, and it will calculate the average of the values in the vector. mean(idaho_wolves) ## [1] 1495.25 Two related functions are length(), which tells you how many values are in your vector, and sum(), which adds up all the values. The mean of a vector is just the sum divided by the length, so you can try to calculate the same value we calculated above using sum() and length(). sum(idaho_wolves)/length(idaho_wolves) ## [1] 1495.25 A.2 Part 2: Trying things out yourselves (10 minutes, on your own) Create two data vector using these data. The first should be called mt_wolves, and the second mt_years. # write code to store these data as mt_wolves c(1119, 1107, 1147, 1153, 1181, 1143, 1087) ## [1] 1119 1107 1147 1153 1181 1143 1087 # write code to store these data as mt_years c(2016, 2017, 2018, 2019, 2020, 2021, 2022) ## [1] 2016 2017 2018 2019 2020 2021 2022 Calculate the mean of mt_wolves using the mean() function. Run the code plot(x = mt_years, y = mt_wolves). You should see a plot labeled with “mt_years” on the x-axis and “mt_wolves” on the y-axis. Check in with your neighbor – does this population appear to be stable? What else would you want to know? Are you happy with the way this plot is representing these data? (Time permitting). If you have finished quickly, this question provides some extra prompts for you to explore. This material will not be assessed on HW 1. So far you ran the plot() function using only two arguments (the x-values and the y-values). plot() can take many more arguments as well, including specifying better limits for your x- and y-axes. Run the code plot(x = mt_years, y = mt_wolves, ylim = c(0,1200)). What is different about this plot from your previous one? Try out some different numbers there, or add an additional argument xlim to adjust the x-axis. A.3 Part 3: Making toast (10 minutes total) Open google drive and create a folder for WFC 98. Then make a google doc to use for notes for the non-coding parts of today. Take 2 minutes to think about and write down the steps required to making toast, starting with a bag of bread and a toaster. Imagine you are explaining this to a 5-year-old who is a reasonable human being, but has never used a toaster by themselves. After 3 minutes, check in with your neighbors to your left and right. If you are by yourself, feel free to scoot over to a different station to chat with folks. A.3.1 Class discussion (5 minutes, instructor will lead) A.4 Part 4: Data frames to link data together (5 minutes, instructor will lead) Hopefully the toast-making activity has you thinking about giving precise directions. It can be very helpful to try to imagine any line of R code into a sentence, and practice saying exactly what you think that code is doing. In an R script, we can actually do that using comments. A comment is a line of code/text that will NOT be run, but can provide useful notes to remind you what particular code chunks are doing. Comment lines start with the hashtag symbol, #. Pay attention to the comments in the code below. Most data you work with in R will not be stored as many individual vectors. Instead, there is a useful data structure called a data frame that can keep track of several associated values. It might be easier to think about this with an example. Run the following code to make a data frame with both wolf population and years for the state of Idaho. # This code creates a data frame with a column named &quot;population&quot; that has values from # the idaho_wolves vector, and a column named &quot;year&quot; with values from # idaho_years idaho &lt;- data.frame(population = idaho_wolves, year = idaho_years) Let’s check out this new object, idaho, in our environment (top right). It says “4 obs. of 2 variables”. Now click on its name (“idaho”) in the environment. R should open a new tab in the upper left that shows you a spreadsheet version of those data. There are four rows and two columns. They correspond to four observations (the population in each of those four years), and we have two variables associated with each observation (the number of wolves and the year). More generally, data frames in R offer a way to store spreadsheet data as a single object, with rows corresponding to the number of observations in your data set, and columns representing the variables. The columns can have pleasantly descriptive names to help you know what they represent; here they are “population” and “year”. Part of your first homework will guide you through a few more steps for manipulating data frames. A.5 Wrapping up (5 minutes) Finally, you should have a lot of code written out in your script. Make sure that you save that script (In the very upper left of RStudio click on “File” then “Save As…” and save it to the computer’s desktop.) Then save the .R file it to your WFC 98 google drive folder. Be sure also that it has a nice, descriptive file name, like “WFC98_lab1.R”, so that you can easily find it later. Make sure that your google doc with notes from today is also saved in the WFC 98 folder. A.6 Extra material for interest (will not be assessed on any homework) Under the Tools tab (top of your workspace), you can open “Global Options…”. Explore through here to see ways to customize your RStudio workspace. You may want to try out some other “Editor themes” in the “Appearance” tab. There is a great graduate student course called R-DAVIS that has lots of useful materials online. Check out their introductory lesson here: https://gge-ucd.github.io/R-DAVIS/lesson_01_intro_r_rstudio.html. "],["lab-2-indicies-in-r-r-markdown.html", "B Lab 2: Indicies in R, R Markdown B.1 Part 0: Figure of the week (5-10 minutes, instructor leading) B.2 Part 1: R vs. RStudio, .R vs. .Rmd files (5 minutes, instructor leading) B.3 Part 2: Indices and column names (5 minutes, instructor will lead) B.4 Part 3: Index work on your own (10 minutes, on your own) B.5 Part 4: Messing around with R Markdown (15 minutes, on your own) B.6 Wrapping up (5 minutes) B.7 Extra material for interest", " B Lab 2: Indicies in R, R Markdown In this lab, we will do a small amount of R programming, learn how to write reproducible analyses using R Markdown, and get started on skills to read primary literature. By the end of this lab, you should be able to: use indices and data frame column names to select particular pieces of data, edit an R Markdown file to integrate text and code and change the document style, knit an R Markdown file. B.1 Part 0: Figure of the week (5-10 minutes, instructor leading) B.2 Part 1: R vs. RStudio, .R vs. .Rmd files (5 minutes, instructor leading) B.2.1 R vs. RStudio This short section has some clarifications about the programs we are use. You are using the programming language R. That is the primary skill you are developing in these labs. But the program we open to write our R code is called RStudio. RStudio is known as an IDE (an integrated development environment), which is a fancy way to say that it is a useful program in which to write and run your R code. So, on a future CV, say that you are proficient in R (and, soon enough, R Markdown). You don’t have to explicitly mention RStudio. This raises another issue that throws people off at the start. Always begin your programming sessions by opening RStudio, not just the R program. The default R program is not a very user friendly environment for coding and does not work well with R Markdown (.Rmd) files. B.2.2 R scripts (.R files) vs. R Markdown files (.Rmd) When people are performing substantial amounts of R programming, they tend to write their code in scripts. These are files that end in “.R”, and they are intended to include nothing but code (ideally with some comments as well). However, R scripts do not provide an easy way to combine regular text and code. Sure, you can (and should) add comments to your code to explain what each line is doing. But comments are not an easily readable way to include large amounts of text. R scripts also do not allow for images, plots, or displays of the results of code. That’s where R Markdown comes in. With a “.Rmd” file, the default is that you are writing text. However, you can also add code chunks with R code, and have that code run to generate interesting plots or other outputs. B.3 Part 2: Indices and column names (5 minutes, instructor will lead) Let’s pull up last week’s data very quickly. idaho_wolves &lt;- c(1545, 1556, 1543, 1337) idaho_years &lt;- c(2019, 2020, 2021, 2022) idaho &lt;- data.frame(population = idaho_wolves, year = idaho_years) It is often the case that you want to select only a particular column in a data frame, or a particular value in a vector. Let’s see first, then discuss. idaho_wolves[4] ## [1] 1337 idaho$year ## [1] 2019 2020 2021 2022 You should note that idaho_wolves[4] outputs the 4th value in that vector (1337). And that idaho$year shows you the entire year column in the data frame idaho. Let’s look at some more complex code. idaho_wolves[1:3] ## [1] 1545 1556 1543 idaho_wolves[c(1,3)] ## [1] 1545 1543 idaho$year[2] ## [1] 2020 idaho[1,2] ## [1] 2019 A few things to unpack. First, we used a very odd function (the : operator), which is a quick way for R to create a vector that is a sequence of numbers. The code tells us to pull the 1st through 3rd entry in our vector. This function will often be useful. Try running 7:20, then try running 10:5. That’s right, it even works backwards. Next, if we want to specify several entries, we can’t just write 1,3. We need to make the relevant indices (1 and 3) into a vector as c(1,3). Then we use that inside our square brackets to find the 1st and 3rd entry. Because idaho$year is just a vector (from that column’s values), we can pick particular entries in the same way. However, if we have a dataframe, there are both rows and columns. In that case, you would entry two values/vectors: one for the row(s) and one for the column(s). So idaho[1,2] gives you the value from the 1st row and second column. We won’t use this approach much – there are more sophisticated tools for selecting parts of our data for tidying or plotting. B.4 Part 3: Index work on your own (10 minutes, on your own) Here are some new data. #creating a data frame for montana populations through time mt_wolves &lt;- c(1119, 1107, 1147, 1153, 1181, 1143, 1087) mt_years &lt;- c(2016, 2017, 2018, 2019, 2020, 2021, 2022) montana &lt;- data.frame(population = mt_wolves, year = mt_years, state = c(&quot;montana&quot;)) We did something cute, and added a third column that just says “montana” in literally every row. (Nice to keep the state associated with the data in the other columns.) Your tasks: Write code to select the 3rd through 5th values in the mt_wolves vector. Write code to select the 1st, 2nd, and 6th entry in mt_years. Select just the year column in the montana data frame. Create a new idaho data frame that includes a population column, a year column, and a state column that just says “idaho” in every entry. # all code goes in here B.5 Part 4: Messing around with R Markdown (15 minutes, on your own) In RStudio, if you click on the Help tab at the top, you will see a selection labeled “Cheat Sheets”. Select “R Markdown Cheat Sheet”, which will download and open a pdf. This cheat sheet is also posted on Canvas in Files. I find it a little overwhelming, but here you really just need to focus on the right side of the first page “Write with Markdown”. This section has instructions about how to format text, create headers, make lists, etc. Let’s try things out. Knit this document to an html file. To do this, click on the down arrow/triangle just to the right of the “Knit” button that is on the navigation bar below the name of the file. A dropdown menu will appear – click “Knit to HTML”. This should quickly create an html file (like the kinds that represent web pages) that you can view. It should include the text, code, plots, and formatted LaTeX formulas for population growth. Take a minute to see how different parts of the Rmd produced different kind of formatting. Just above your Rmd file, you should also see a little button that says “Visual”. If you select that, you can switch to a visual edit which allows for easy styling of an Rmd. Create some headers using the # symbol. Which one is the biggest? The smallest? You can create headers of six different sizes, from # to ######. # Put something here. B.5.1 Put something else here. B.5.1.0.1 And some more. Style your text. Italicize this sentence. Bold this sentence. Create an unordered list (like bullet points in a powerpoint) of your five favorite foods. For one of the foods, add at least two sub-items (perhaps those could be specific variations of that food) At the end of the previous section, we manipulated some Montana wolf data. Use these numbers to create a table with two columns (first header “year”, second header “pop. size”). B.6 Wrapping up (5 minutes) Knit your file to HTML, and save the original Rmd, then add them to your WFC 98 folder on Google Drive. B.7 Extra material for interest Browse this article on R Markdown. Try creating a new .Rmd file and exploring. Try adding the option “echo=FALSE” to the top of an R code chunk (see the examples in the bottom left on the first page of the R Markdown cheat sheet). How does the HTML file look different after you knit the .Rmd file again? What about using “eval=FALSE”? Get started on HW 1. "],["lab-3-visualizing-data-in-r-part-1.html", "C Lab 3: Visualizing data in R (Part 1) C.1 Part 0: Figure of the week (5-10 minutes, instructor leading) C.2 Part 1: Packages in R (covered in lecture, so only here for reference) C.3 Part 2: Using ggplot() for plotting in R (15 minutes, self-led) C.4 Part 3: Exploring (15 minutes, self-led) C.5 Wrapping up (5 minutes) C.6 Extra material", " C Lab 3: Visualizing data in R (Part 1) In this lab, we will get into one of the really fun parts of R programming – making figures! By the end of this lab, you should be able to: load an R package using the library() function, install R packages as needed using install.packages(), use the ggplot2 package within the tidyverse to write simple code to plot data, create boxplots, histograms, and scatterplots to compare the distributions of different subgroups of data. C.0.1 Resources This lab is loosely based on chapter 1 in the online textbook “R for Data Science” (second edition), which you can find online here: https://r4ds.hadley.nz/data-visualize C.1 Part 0: Figure of the week (5-10 minutes, instructor leading) C.2 Part 1: Packages in R (covered in lecture, so only here for reference) Many functions and data in R are not instantly available. Instead, they are available online as “packages”. Packages extend the usefulness of R with new functions and data (and documentation/metadata), and they are hosted online in a standard way for easy installation and loading. C.2.1 Installing an R package Installing an R package is easy to do within RStudio. In the computer labs we have already installed most R packages that you will need for any coding in WFC 98. However, when you are programming on your personal computer you will need to install any packages that need to be loaded for a particular lab or HW. You only need to install an R package once. The code chunk below is only necessary if you are working on this lab at home, because these packages are already installed in the computer lab. # the line below is commented so it won&#39;t run. # if you need to install the packages, delete the hashtag then run # the line below, but then turn it into a comment again # before knitting # install.packages(c(&quot;tidyverse&quot;, &quot;palmerpenguins&quot;)) Delete or comment out any install.packages() commands before you knit. You cannot knit an Rmd that still has active install.packages() code. C.2.2 Loading an R package On the other hand, you must have code to load any relevant R packages inside of your Rmd if you go on to use functions/data from those packages in your Rmd. Loading an R package tells R/RStudio that you plan to use that package during your current sessions. You need to load an R package in every session that you use it. After it is loaded, it will stay loaded until you close R/RStudio. # loading the tidyverse package library(tidyverse) ## Warning: package &#39;tidyverse&#39; was built under R version 4.4.3 ## Warning: package &#39;ggplot2&#39; was built under R version 4.4.2 ## Warning: package &#39;tibble&#39; was built under R version 4.4.2 ## Warning: package &#39;tidyr&#39; was built under R version 4.4.3 ## Warning: package &#39;readr&#39; was built under R version 4.4.3 ## Warning: package &#39;purrr&#39; was built under R version 4.4.3 ## Warning: package &#39;dplyr&#39; was built under R version 4.4.3 ## Warning: package &#39;stringr&#39; was built under R version 4.4.2 ## Warning: package &#39;forcats&#39; was built under R version 4.4.3 ## Warning: package &#39;lubridate&#39; was built under R version 4.4.3 ## ── Attaching core tidyverse packages ─────── ## ✔ dplyr 1.1.4 ✔ readr 2.1.5 ## ✔ forcats 1.0.0 ✔ stringr 1.5.1 ## ✔ ggplot2 3.5.1 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.4 ✔ tidyr 1.3.1 ## ✔ purrr 1.0.4 ## ── Conflicts ────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors If you run this code and get the error message that there is no package called ‘tidyverse’, that means that the package is not installed, and you’ll need to use the earlier code to install it. Assuming everything worked, in your output you’ll notice a somewhat odd message. It says “Attaching core tidyverse packages” and then lists several cryptic names. Unlike most packages, tidyverse is a suite of multiple R packages, but you can load them all in one line to save time, because they are commonly used together. Today we are primarily using functions from the ggplot2 package, which was loaded when we used the library(tidyverse) command in the code chunk above. C.2.3 Part 1b (5 minutes, instructor leading) We also need to load the package with the penguin data. #loading the palmerpenguins package, which contains two data frames library(palmerpenguins) ## Warning: package &#39;palmerpenguins&#39; was built under R version 4.4.3 There is one odd thing about data sets that are included in R packages. You will notice that nothing new has shown up in the global environment. However, the data frames are actually loaded (but hidden). penguins ## # A tibble: 344 × 8 ## species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 Adelie Torgersen 39.1 18.7 181 3750 ## 2 Adelie Torgersen 39.5 17.4 186 3800 ## 3 Adelie Torgersen 40.3 18 195 3250 ## 4 Adelie Torgersen NA NA NA NA ## 5 Adelie Torgersen 36.7 19.3 193 3450 ## 6 Adelie Torgersen 39.3 20.6 190 3650 ## 7 Adelie Torgersen 38.9 17.8 181 3625 ## 8 Adelie Torgersen 39.2 19.6 195 4675 ## 9 Adelie Torgersen 34.1 18.1 193 3475 ## 10 Adelie Torgersen 42 20.2 190 4250 ## # ℹ 334 more rows ## # ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt; penguins_raw ## # A tibble: 344 × 17 ## studyName `Sample Number` Species Region Island Stage `Individual ID` ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 PAL0708 1 Adelie Penguin… Anvers Torge… Adul… N1A1 ## 2 PAL0708 2 Adelie Penguin… Anvers Torge… Adul… N1A2 ## 3 PAL0708 3 Adelie Penguin… Anvers Torge… Adul… N2A1 ## 4 PAL0708 4 Adelie Penguin… Anvers Torge… Adul… N2A2 ## 5 PAL0708 5 Adelie Penguin… Anvers Torge… Adul… N3A1 ## 6 PAL0708 6 Adelie Penguin… Anvers Torge… Adul… N3A2 ## 7 PAL0708 7 Adelie Penguin… Anvers Torge… Adul… N4A1 ## 8 PAL0708 8 Adelie Penguin… Anvers Torge… Adul… N4A2 ## 9 PAL0708 9 Adelie Penguin… Anvers Torge… Adul… N5A1 ## 10 PAL0708 10 Adelie Penguin… Anvers Torge… Adul… N5A2 ## # ℹ 334 more rows ## # ℹ 10 more variables: `Clutch Completion` &lt;chr&gt;, `Date Egg` &lt;date&gt;, ## # `Culmen Length (mm)` &lt;dbl&gt;, `Culmen Depth (mm)` &lt;dbl&gt;, ## # `Flipper Length (mm)` &lt;dbl&gt;, `Body Mass (g)` &lt;dbl&gt;, Sex &lt;chr&gt;, ## # `Delta 15 N (o/oo)` &lt;dbl&gt;, `Delta 13 C (o/oo)` &lt;dbl&gt;, Comments &lt;chr&gt; I prefer to formally load the data into my environment, which you can do with the data() function. # the palmerpenguins package called their data &quot;penguins&quot; # and the command will load both data frames data(penguins) Now we can see the data frames in our environment. Let’s take a closer look. # the glimpse() function lets you see the variable (columns) and # a few observations for each variable (rows) glimpse(penguins) ## Rows: 344 ## Columns: 8 ## $ species &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel… ## $ island &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse… ## $ bill_length_mm &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, … ## $ bill_depth_mm &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, … ## $ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186… ## $ body_mass_g &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, … ## $ sex &lt;fct&gt; male, female, female, NA, female, male, female, male… ## $ year &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007… glimpse(penguins_raw) ## Rows: 344 ## Columns: 17 ## $ studyName &lt;chr&gt; &quot;PAL0708&quot;, &quot;PAL0708&quot;, &quot;PAL0708&quot;, &quot;PAL0708&quot;, &quot;PAL… ## $ `Sample Number` &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1… ## $ Species &lt;chr&gt; &quot;Adelie Penguin (Pygoscelis adeliae)&quot;, &quot;Adelie P… ## $ Region &lt;chr&gt; &quot;Anvers&quot;, &quot;Anvers&quot;, &quot;Anvers&quot;, &quot;Anvers&quot;, &quot;Anvers&quot;… ## $ Island &lt;chr&gt; &quot;Torgersen&quot;, &quot;Torgersen&quot;, &quot;Torgersen&quot;, &quot;Torgerse… ## $ Stage &lt;chr&gt; &quot;Adult, 1 Egg Stage&quot;, &quot;Adult, 1 Egg Stage&quot;, &quot;Adu… ## $ `Individual ID` &lt;chr&gt; &quot;N1A1&quot;, &quot;N1A2&quot;, &quot;N2A1&quot;, &quot;N2A2&quot;, &quot;N3A1&quot;, &quot;N3A2&quot;, … ## $ `Clutch Completion` &lt;chr&gt; &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;No&quot;, … ## $ `Date Egg` &lt;date&gt; 2007-11-11, 2007-11-11, 2007-11-16, 2007-11-16,… ## $ `Culmen Length (mm)` &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34… ## $ `Culmen Depth (mm)` &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18… ## $ `Flipper Length (mm)` &lt;dbl&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190,… ## $ `Body Mass (g)` &lt;dbl&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 34… ## $ Sex &lt;chr&gt; &quot;MALE&quot;, &quot;FEMALE&quot;, &quot;FEMALE&quot;, NA, &quot;FEMALE&quot;, &quot;MALE&quot;… ## $ `Delta 15 N (o/oo)` &lt;dbl&gt; NA, 8.94956, 8.36821, NA, 8.76651, 8.66496, 9.18… ## $ `Delta 13 C (o/oo)` &lt;dbl&gt; NA, -24.69454, -25.33302, NA, -25.32426, -25.298… ## $ Comments &lt;chr&gt; &quot;Not enough blood for isotopes.&quot;, NA, NA, &quot;Adult… A few questions to orient ourselves to these data. Which data frame has more variables, or are they the same? Which data frame has more observations, or are they the same? What is different about the column/variable names in penguins as compared to penguins_raw? C.3 Part 2: Using ggplot() for plotting in R (15 minutes, self-led) The core function in the ggplot2 package is called ggplot(). But making plots using ggplot() is like making lasagna. You have to add layers until you’ve produced the perfect result. Recall from lecture that we need the base canvas with the data (and aesthetics), as well as at least one additional geometry layer. We will see lots of types of geom in this course. We’ll briefly begin with a critical type of plot, the scatterplot. That shows two-dimensional points to illustrate the relationship between the x- and y-axis. It has a geometry called geom_point(). ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g)) + geom_point() ## Warning: Removed 2 rows containing missing values or ## values outside the scale range ## (`geom_point()`). Hooray, we have made our first ggplot! However, today we want to practice making histograms and boxplots. So we’ll need some slightly different aesthetics and geometries. We only started with scatterplots because they are so common, and they have a very clearly defined x- and y-axis. Before we move on, there is one crucial thing to note: each time you add a new layer (e.g. a geom, some labels for nicer x- and y-axis titles, etc.) you need to have a plus symbol, +, at the end of the previous line of code. Otherwise R does not know to keep looking for additional layers before making the plot. Let’s try out a histogram. First, we might simply want to visualize the distribution of all of our measurements of bill length. ggplot(data = penguins, mapping = aes(x = bill_length_mm)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better ## value with `binwidth`. ## Warning: Removed 2 rows containing non-finite ## outside the scale range (`stat_bin()`). Because histograms just count values for one variable, there is only one aesthetic (x=bill_length_mm). The geometry was for a histogram is geom_histogram(). There are a few things we might want to consider. This has a lot of separate bins. We might say it is a very fine-grained histogram. We can adjust that with arguments inside of geom_histogram(). This is summarizing data from multiple species at once. That is not very meaningful. We can separate these out in several different ways. To address the first issue, you may have noticed that geometries are also functions, so their output can be modified using arguments just like most other functions in R. By default this function creates 30 bins (thirty separate x-values/bars) for a histogram. Let’s specify a smaller number. ggplot(data = penguins, mapping = aes(x = bill_length_mm)) + geom_histogram(bins = 20) ## Warning: Removed 2 rows containing non-finite ## outside the scale range (`stat_bin()`). Alternatively, we could specify a binwidth, setting how wide each bin should be. Let’s try using a binwidth of 2 (the units for this column are millimeters.) ggplot(data = penguins, mapping = aes(x = bill_length_mm)) + geom_histogram(binwidth = 2) ## Warning: Removed 2 rows containing non-finite ## outside the scale range (`stat_bin()`). Now for the fun part. We can quickly add informative complexity. Let’s keep track of all three species in our histogram. We can add the fill aesthetic fill and the very similar color aesthetics allow you to color code different data points based on another variable/column in your data. Let’s try color first and see why it is NOT ideal here. ggplot(data = penguins, mapping = aes(x = bill_length_mm, color = species)) + geom_histogram(binwidth = 2) ## Warning: Removed 2 rows containing non-finite ## outside the scale range (`stat_bin()`). Hmmm, this is not right. We want the whole bars colored. For some geometries, color only changes the borders, not the full shapes. But color will often be useful, for example to change the color of points when using geom_point(). To fill in a whole shape with color, you use fill instead. ggplot(data = penguins, mapping = aes(x = bill_length_mm, fill = species)) + geom_histogram(binwidth = 2) ## Warning: Removed 2 rows containing non-finite ## outside the scale range (`stat_bin()`). This is still not quite right. It is showing all the data, now color-coded, but it is stacking the numbers rather than showing three separate histograms with some overlap in the x-values. That is because geom_histogram() defaults to stacking data, even if there is a fill aesthetic. You can fix that by changing another argument called position. ggplot(data = penguins, mapping = aes(x = bill_length_mm, fill = species)) + geom_histogram(binwidth = 2, position = &quot;identity&quot;, alpha = 0.7) ## Warning: Removed 2 rows containing non-finite ## outside the scale range (`stat_bin()`). We made two changes. We made it so each species has a separate histogram starting from a count of 0. And we made the bars partially transparent with the alpha argument. (0 is totally transparent, 1 is totally solid colors.) It’s a little wonky, but we can pretty much read each histogram now. Instead, let’s switch to box-and-whisker plots. These use a different geometry, geom_boxplot, and they will have a continuous variable for one axis, and usually also a discrete variable (e.g., species) for the other axis. Let’s stick with bill length and species and make three vertical boxplots, one for each species. ggplot(data = penguins, mapping = aes(x = species, y = bill_length_mm)) + geom_boxplot() ## Warning: Removed 2 rows containing non-finite ## outside the scale range (`stat_boxplot()`). This is easier to look at. We can see quite clearly that Adelie Penguins have the lowest bill length, while the Chinstrap and Gentoo Penguin samples have subtantial overlap in bill length. C.4 Part 3: Exploring (15 minutes, self-led) Use the code chunks below to try out some plotting with a new variable. Create a histogram like the fancy, partially transparent one we made above, but for the variable bill_depth_mm instead of bill length, still using the fill aesthetic with the species column. Hint: copy and paste that code into the chunk below, then switch the variable name(s) as needed. # write your code in this chunk Now create a boxplot with species as the x-axis and bill_depth_mm as the y-axis. # write your code in this chunk Compare with your results for bill length. Bill depth refers to the thickness (top to bottom) of a bill, while bill length is the distance from the base of the bill to the tip. Which species seems to have an overall short, thick bill? Which species seems to have an overall long, skinny bill? Double-check by googling the species to see some photos. Remove this and add your text notes here. Try to fix these snippets of broken code. You will note that we have added an option to these code chunks that says “eval = FALSE”. That is how we say that RStudio should not try to actually run (evaluate) that code when knitting the Rmd file into HTML. Because the code is broken, it you tried to knit when “eval = TRUE” (i.e. when RStudio will try to run that code), then it will return and error and your code won’t knit. Feel free to remove that option or switch it to “eval = TRUE” after you have fixed the code for each chunk. Note: if you are ever trying to knit a HW and your code is returning errors, you can always set those chunks to “eval = FALSE” if you want to still be able to submit your knit file. Chunk 1 – this plot won’t run. # uncomment the code below and try to fix it #ggplot(data = penguins, # x = species, # y = body_mass_g) + # geom_boxplot() Chunk 2 – a blank plot won’t do. ggplot(data = penguins, mapping = aes(x = species, y = bill_depth_mm)) geom_violin() ## geom_violin: draw_quantiles = NULL, na.rm = FALSE, orientation = NA ## stat_ydensity: trim = TRUE, scale = area, na.rm = FALSE, orientation = NA, bounds = c(-Inf, Inf) ## position_dodge (Time permitting.) The code below creates a scatterplot with bill length and bill depth, while also color coding the points. Review the code, then try to do the same thing for a boxplot of bill length, color-coding each box for the species it represents. ggplot(data = penguins, mapping = aes(x = bill_length_mm, y = bill_depth_mm, color = species)) + geom_point() ## Warning: Removed 2 rows containing missing values or ## values outside the scale range ## (`geom_point()`). C.5 Wrapping up (5 minutes) Knit your file to HTML, and save the original Rmd, then add them to your WFC 98 folder on Google Drive. C.6 Extra material Start on HW 2. Look over the intro chapter on data visualization in the R for Data Science textbook https://r4ds.hadley.nz/data-visualize. Here are a few things to try out. Add a geom_smooth() layer on top of geom_point() for one of the scatterplots we made. What does it do? Check out geom_density() instead of geom_histogram() in one of our histogram-making code chunks above. What does it do? Try adding the argument adjust = 1/2 or adjust = 2 and see how it changes the shape. (You will need to remove the bin or binwidth options, because those are only relevant for geom_histogram()). Try out the exercises in section 2.4.3. Try to make the same scatterplot we made in our very first plot, but using penguins_raw instead of penguins. Can R handle column names that have spaces in them? (Hint: using the left quote symbol, `, on either side of the name will allow R to understand that you are trying to refer to a column name.) Check out this code and plot below. It is a prettier version of our boxplot for culmen length. Google some of the additional layers I added to see how to create and modify them yourself. You may want to explore themes, explained more on this website. Rob often finds himself using theme_bw() and theme_classic(). ggplot(data = penguins, mapping = aes(x = species, y = bill_length_mm)) + geom_boxplot() + geom_jitter(width = .1) + theme_classic() + labs(x = &quot;&quot;, y = &quot;culmen length (mm)&quot;) ## Warning: Removed 2 rows containing non-finite ## outside the scale range (`stat_boxplot()`). ## Warning: Removed 2 rows containing missing values or ## values outside the scale range ## (`geom_point()`). "],["lab-4-visualizing-data-in-r-part-2.html", "D Lab 4: Visualizing data in R (Part 2) D.1 Part 0: Figure of the week (5-10 minutes, instructor leading) D.2 Part 1: New data! (5 minutes, instructor leading) D.3 Independent work (25 minutes) D.4 Wrapping up (5 minutes) D.5 Extra material for interest (will not be assessed on any homework)", " D Lab 4: Visualizing data in R (Part 2) In this lab, we will learn several more plotting skills. By the end of this lab, you should be able to: use geom_jitter() to deal with overlapping points, adjust attributes like color and fill, rather than only using them as aesthetics with a particular variable, add themes to make your plots more attractive, customize your x- and y-axis labels and add a plot title. D.0.1 Resources We will work with a new data set today based on lizard measurements. These data have been tidied up by data scientist Allison Horst. Much of what we explore today has been modified by a plotting tutorial she created, which is available online here: https://allisonhorst.github.io/rice-data-viz/. D.1 Part 0: Figure of the week (5-10 minutes, instructor leading) D.2 Part 1: New data! (5 minutes, instructor leading) This is mostly review from what you learned at the end of Monday’s lecture. D.2.1 Loading data You can load data into R in several ways. We started with the easiest: loading a R package that includes some data frames. Another pleasantly simple way to load data is read a csv (spreadsheet) file directly from where it is hosted online. Let’s do that now, with the help of the read.csv() function. # loading a csv file from this URL. The header argument just tells R # that the first row is not data, but is instead a header # with column names lizards &lt;- read.csv(&quot;https://raw.githubusercontent.com/allisonhorst/rice-data-viz/gh-pages/data_tidy/lizards.csv&quot;, header = TRUE) # loading tidyverse for our plotting and data wrangling needs library(tidyverse) D.2.2 About these data (for reference, not for discussion during lab) The full data are available here, and are from another long-term ecological research site, this time for lizards in New Mexico. The data include time (date of trapping), species names, some aspects of where they were sampled, some qualitative features (age/sex), and some quantitative variables like sv_length (snout-vent length). For reference, here are some plots we made at the end of Monday’s lecture. They will not appear because this code chunk is set to eval = FALSE. # scatterplot of length vs. body weight ggplot(data = lizards, aes(x = total_length, y = weight)) + geom_point() # reminder that line plots are rarely appropriate ggplot(data = lizards, aes(x = total_length, y = weight)) + geom_line() # AHHHH, THOSE LINES ARE MEANINGLESS AND SCARY` # visualizing a single continuous variable with a histogram ggplot(data = lizards, aes(x = total_length)) + geom_histogram() D.3 Independent work (25 minutes) Let’s begin with a new geometry called geom_jitter(). When do we need it? When we have lots of points that have the exact same value. In that case, you can’t fully see all your data points. geom_jitter() is just a variant of geom_point() that will slightly randomly shift points so you can see points that are on top of each other more clearly. Compare these two plots. # many points have the exact same weight, making this look sparse ggplot(data = lizards, aes(y = common_name, x = weight)) + geom_point() # the jitter will reveal just how many measurements we have ggplot(data = lizards, aes(y = common_name, x = weight)) + geom_jitter() D.3.1 Task 1: working with geom_jitter() Make the same two plots for snout-vent length (sv_length) rather than weight. Hint: copy and paste, then change the column/variable inside of aes(). # write your code and comments in this chunk D.3.2 Making consistent changes to data attributes We use aes() when we want to use a variable/column from our data and represent it with a visual attribute (e.g. x- or y-value, color, size). But we might want to stylize our plot to consistently have blue points, or red shapes, or larger lines. Here is an example. ggplot(data = lizards, aes(y = common_name, x = sv_length)) + geom_boxplot(color = &quot;blue&quot;, fill = &quot;light green&quot;, linetype = &quot;dotted&quot;) D.3.3 Task 2: changing attributes throughout a plot Using the same aesthetics, create a violin plot. Make the interior of each violin colored “light blue” with a “blue” border. Use the argument width = 0.8 to make the violins a bit skinnier (80% of their usual thickness). # write your code in this chunk D.3.4 Adding a theme In lecture we have briefly noted that adding a theme layer provides a quick way to make the plot more visually pleasing. Here we can demonstrate a not-super-attractive theme, and then you can explore. # creating a violin plot with a dark theme ggplot(data = lizards, aes(y = common_name, x = sv_length)) + geom_violin(fill = &quot;light blue&quot;) + theme_dark() Check out the other themes here: https://ggplot2.tidyverse.org/reference/ggtheme.html. D.3.5 Task 3: themes Create a scatterplot with snout-vent length on the x-axis and weight on the y-axis. Add a theme layer using one of the themes from the website above. Try a few themes until you find one you like, and don’t just use theme_dark() again. # write your code in this chunk D.3.6 Customizing labels As we have seen in lecture, adding a labs() layer is a simple way to make x- and y-axis labels that are clearer to your reader. # adding labels to our previous plot ggplot(data = lizards, aes(y = common_name, x = sv_length)) + geom_violin(fill = &quot;light blue&quot;) + theme_dark() + labs(x = &quot;snout-vent length (mm)&quot;, y = &quot;&quot;, title = &quot;Length distributions for New Mexico lizards&quot;) The sv_length variable was unclear, so I make the new x-axis label state the full name (and units, which are listed in section 2.2 of Allison Horst’s tutorial). I also elected make the y-axis label blank, because common name is self-explanatory. To do so, I just make the y-axis label be a set of empty quotes ““. Finally, I added a title. D.3.7 Interlude: finding data for the Data Story assignment One particularly useful source for ecological data is data dryad. https://datadryad.org/ Take a moment now to search for a topic you are interested in, for example “desert tortoise conservation” or “american bison”. You might find a number of data sets related to your interests. For now, just try to make sense of the page for a data set, e.g. https://datadryad.org/stash/dataset/doi:10.5061/dryad.k3j9kd56m There will always be a link to download the data (sometimes multiple files). On the right side, there is sometimes a link to a published paper about the data. For the tortoise data, it is https://academic.oup.com/beheco/article/28/4/1075/3808891. And there is often a readme.txt file with details about exact what the data in each column mean. In this case there isn’t, but perhaps the published paper can help you make sense of the data. Spend five minutes searching around for potential data sets. Don’t get too excited yet! Find the right, usable data set that you really understand is way more valuable than finding a confusing data set on a cool topic. So just explore for now. D.3.8 Task 4: Nice labels (time permitting) To prep for this next task, I will preview a data-tidying skill we will learn next week. # creating a data frame with only side-blotched lizards # make sure the tidyverse is loaded before using filter() in this way lizard_side_blotched &lt;- filter(lizards, common_name == &quot;side-blotched lizard&quot;) Create a histogram of total_length for our new data frame, lizard_side_blotched. change the fill and/or color attributes to make it nice-looking, add a theme, and add better labels. The y-axis label should be “frequency”. You can decide on the x-axis label and title, but make sure they are descriptive. # write your code in this chunk D.4 Wrapping up (5 minutes) Knit your file to HTML, and save the original Rmd, then add them to your WFC 98 folder on Google Drive. D.5 Extra material for interest (will not be assessed on any homework) Work on HW 3. Look over the next section of the tutorial, which covers some additional skills for plot customization: https://allisonhorst.github.io/rice-data-viz/#5_Advanced_ggplot2_customization You will discover a lot of ways to customize the finer-scale details of your plots. Play around to create a beautiful and effective plot of some variables of your choosing. Consider layers like scales, for example plotting using a logarithmic scale rather than linear, or adjusting the spacing of breaks/tick marks on a plot. # write your code in this chunk "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
